imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi:             ~
    translator:      { fallbacks: [en] }
#    translator:  ~
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  es
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"

#Stof Configuration
stof_doctrine_extensions:
    default_locale: "%locale%"
    orm:
        default:
            timestampable: true
            loggable: true
            softdeleteable: true

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        filters:
            softdeleteable:
                class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                enabled: true

# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

#FOSUser Configuration
fos_user:
    db_driver: orm # other valid values are 'mongodb' and 'couchdb'
    firewall_name: main
    user_class: AppBundle\Entity\User
    service:
        mailer: fos_user.mailer.twig_swift
    resetting:
        email:
            template:   email/password_resetting.email.twig
    registration:
        form:
            type: app_user_registration
        confirmation:
            enabled: true
            from_email:
                address:        no-reply@example.com
                sender_name:    INTA - Registration
    resetting:
        email:
            from_email:
                address:        resetting@example.com
                sender_name:    INTA - Resetting account

# Vich Configuration
vich_uploader:
    db_driver: orm
    mappings:
        image_profile:
            uri_prefix:         /uploads/user/profile
            upload_destination: %kernel.root_dir%/../web/uploads/user/profile
            inject_on_load:     false
            delete_on_update:   false
            delete_on_remove:   false
        files:
            uri_prefix:         /uploads/news/files
            upload_destination: %kernel.root_dir%/../web/uploads/news/files
            inject_on_load:     false
            delete_on_update:   false
            delete_on_remove:   false

#Liip imagine Configuration
liip_imagine:
    # configure resolvers
    resolvers:
        # setup the default resolver
        default:
            # use the default web path
            web_path: ~
    # your filter sets are defined here
    filter_sets:
        # use the default cache configuration
        cache: ~

        thumb:
             # adjust the image quality to 75%
            quality: 75

            # list of transformations to apply (the "filters")
            filters:
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail: { size: [150, 150], mode: outbound }

#Bazing faker config
bazinga_faker:
    orm: doctrine
    entities:
        AppBundle\Entity\User:
            number: 100
            custom_formatters:
                lastLogin:   { method: null }
                expiresAt:   { method: null }
                confirmationToken:   { method: null }
                passwordRequestedAt:   { method: null }
                credentialsExpiredAt:   { method: null }
                deletedAt:   { method: null }
                imageName:   { method: image }
                firstName:   { method: firstName }
                lastName:   { method: lastName }
        AppBundle\Entity\GoogleMap:
                  number: 100
                  custom_formatters:
                      latitude:   { method: latitude }
                      longitude:    { method: longitude }
        AppBundle\Entity\CaseStudy:
            number: 100
        AppBundle\Entity\UserProfile:
            number: 100

fos_elastica:
    clients:
        default: { host: localhost, port: 9200 }
    indexes:
        app:
            types:
                InstitutionType:
                    properties:
                        name: ~
                    persistence:
                        driver: orm
                        model: AppBundle\Entity\InstitutionType
                        provider: ~
                        finder: ~